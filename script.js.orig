
class Store {
  constructor(options) {
    // Initial state
    this.state = options.state || {};
   
    // Mutations
    this.mutations = options.mutations || {};
   
    // Subscribers (used for reactive updates)
    this.subscribers = [];
  }

  // Commit method to trigger mutations
  commit(mutation, payload) {
    if (this.mutations[mutation]) {
      const prevState = JSON.parse(JSON.stringify(this.state));
      this.mutations[mutation](this.state, payload);
      this.notifySubscribers(prevState);
    } else {
      console.error(`Mutation ${mutation} does not exist`);
    }
  }

  // Subscribe to state changes
  subscribe(path, fn) {
    this.subscribers.push({ path, fn });
  }

  // Notify all subscribers of a state change
  notifySubscribers(prevState) {
    this.subscribers.forEach(({ path, fn }) => {
      const newValue = getNestedProperty(this.state, path);
      const prevValue = getNestedProperty(prevState, path);
      if (JSON.stringify(newValue) !== JSON.stringify(prevValue)) {
        fn(newValue, prevValue);
      }
    });
  }

  // Print the current state
  printState() {
    console.log('Current State:', JSON.parse(JSON.stringify(this.state)));
  }
}

// Utility function to get nested property
function getNestedProperty(obj, path) {
  if (typeof path !== 'string') {
    path = String(path);
  }
  return path.split('.').reduce((acc, key) => acc && acc[key], obj);
}


// Initialize store with initial state and mutations
const store = new Store({
    state: {
        artifact: {
            identifier: '',
            type: '',
            title: '',
            version: '',
            changed: false,
            content: null
        },
        messages: [
            { role: "system", content: "" }
        ]
    },
    mutations: {
        setArtifact(state, artifactData) {
            state.artifact = { ...state.artifact, ...artifactData };
        },
        setArtifactContent(state, content) {
            state.artifact.content = content;
            state.artifact.changed = true;
        },
        setArtifactChanged(state, changed) {
            state.artifact.changed = changed;
        },
        addMessage(state, message) {
            state.messages.push(message);
        },
        updateSystemMessage(state, content) {
            state.messages[0].content = content;
        },
        clearMessages(state) {
            state.messages = [{ role: "system", content: state.messages[0].content }];
        },
        resetArtifact(state) {
            state.artifact = {
                identifier: '',
                type: '',
                title: '',
                version: '',
                changed: false,
                content: null
            };
        }
    }
});


document.addEventListener('DOMContentLoaded', function() {
    const chatContainer = document.getElementById('chatContainer');
    const chatInput = document.getElementById('chatInput');
    const chatButton = document.getElementById('chatButton');
    const apiKeyInput = document.getElementById('apiKey');
    const modelSelect = document.getElementById('model');
    const settingsError = document.getElementById('settingsError');
    const renderModeRadios = document.querySelectorAll('input[name="renderMode"]');
    const editModeRadios = document.querySelectorAll('input[name="editMode"]');
    const clearChatButton = document.getElementById('clearChatButton');
    const systemPromptInput = document.getElementById('systemPrompt');
    const artifactContainer = document.getElementById('artifact-tab');
    const codeChangeIndicator = document.getElementById('codeChangeIndicator');
    const editor = ace.edit("codeArea");

    editor.setOptions({selectionStyle: "text"})
    editor.setTheme("ace/theme/github");
    editor.session.setOption("wrap", true);
    editor.session.setUseWrapMode(true);
    editor.setOption("highlightActiveLine", false);
    document.getElementById('codeArea').style.fontSize='15px';


    // Subscribe to artifact changes
    store.subscribe('artifact', (newValue, prevValue) => {
        updateArtifactDisplay();
        if (newValue.content !== prevValue.content) {
            editor.session.off("change", changeHandler);
            editor.setValue(newValue.content || "", -1);
            editor.session.on("change", changeHandler);
        }
    });

    // Tab handling
    const tabLabels = document.querySelectorAll('.tab-label');
    const tabContents = document.querySelectorAll('.tab-content');

    tabLabels.forEach(label => {
        label.addEventListener('click', () => {
            switchTab(label.getAttribute('data-tab'));
        });
    });

    window.switchTab = function(tabName) {
        tabLabels.forEach(lbl => lbl.classList.remove('active'));
        tabContents.forEach(content => content.classList.remove('active'));

        const selectedLabel = document.querySelector(`.tab-label[data-tab="${tabName}"]`);
        const selectedContent = document.getElementById(`${tabName}-tab`);

        if (selectedLabel && selectedContent) {
            selectedLabel.classList.add('active');
            selectedContent.classList.add('active');
        }

        if(tabName == "code") {
            setTimeout(() => {
                editor.resize();
            }, 0);
        }
    };

    let renderMode = 'markdown';
    let editMode = 'llm and user';
    setEditorState();

    function setEditorState() {
        editor.setReadOnly(editMode === "llm only");
    }

    // Set default API key
    const defaultApiKey = '';
    if (!apiKeyInput.value) {
        apiKeyInput.value = defaultApiKey;
    }

    // Event listeners
    editModeRadios.forEach(radio => {
        radio.addEventListener('change', function() {
            editMode = this.value;
            setEditorState();
        });
    });

    renderModeRadios.forEach(radio => {
        radio.addEventListener('change', function() {
            renderMode = this.value;
            rerenderMessages();
        });
    });

    chatButton.addEventListener('click', sendMessage);
    chatInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
        }
    });
    clearChatButton.addEventListener('click', clearChatMessages);
    systemPromptInput.addEventListener('input', updateSystemMessage);

    function updateSystemMessage() {
        store.commit('updateSystemMessage', systemPromptInput.value.trim());
    }

    function clearChatMessages() {
        chatContainer.innerHTML = '';
        store.commit('clearMessages');
        store.commit('resetArtifact');
        editor.session.off("change", changeHandler);
        editor.setValue("", -1);
        updateArtifactDisplay();
    }

    function changeHandler(delta) {
        const editorContent = editor.getValue();
        if (editMode === "llm and user") {
            store.commit('setArtifactContent', editorContent);
        }
    }

    function updateArtifactDisplay() {
        const artifact = store.state.artifact;
        if (artifact && artifact.content) {
            if (artifact.type === "text/markdown") {
                const markdown = artifact.content;
                const markedOptions = { breaks: true, gfm: true };
                const processedMarkdown = preprocessMessageForMath(markdown);
                let html = marked.parse(processedMarkdown, markedOptions);
                artifactContainer.innerHTML = html;
                MathJax.typesetPromise([artifactContainer]).catch((err) => console.error(err.message));
            } else {
                artifactContainer.innerHTML = artifact.content;
            }
        } else {
            artifactContainer.innerHTML = '';
        }
    }

    function appendArtifactToMessage(userMessage) {
        const artifact = store.state.artifact;
        if (artifact && artifact.changed) {
            const newVersion = (parseInt(artifact.version) + 1).toString();
            store.commit('setArtifact', { version: newVersion, changed: false });
            
            const artifactContent = `<artifact identifier="${artifact.identifier}" type="${artifact.type}" title="${artifact.title}" version="${newVersion}">
${artifact.content}
</artifact>`;

            return `${userMessage}\n\n${artifactContent}`;
        }
        return userMessage;
    }

    function createMessageElement(message, sender) {
        const messageElement = document.createElement('div');
        messageElement.classList.add('chat-message', `${sender}-message`);

        const messageContent = document.createElement('div');
        messageContent.classList.add('message-content');

        const iconElement = document.createElement('div');
        iconElement.classList.add('message-icon');
        iconElement.textContent = sender === 'user' ? 'Me:' : 'AI:';

        const textElement = document.createElement('div');
        textElement.classList.add('message-text');

        const renderedMessage = renderMessageText(message);
        textElement.innerHTML = renderedMessage;

        messageContent.appendChild(iconElement);
        messageContent.appendChild(textElement);
        messageElement.appendChild(messageContent);

        return { messageElement, textElement };
    }

    function addMessageToUI(message, sender) {
        const { messageElement, textElement } = createMessageElement(message, sender);
        chatContainer.appendChild(messageElement);
        scrollToBottom();

        if (renderMode === 'markdown') {
            MathJax.typesetPromise([textElement]).catch((err) => 
                console.error(err.message));
        }
    }

    async function sendMessage() {
        let userMessage = chatInput.value.trim();
        if (userMessage) {
            if (!apiKeyInput.value.trim() || !modelSelect.value) {
                settingsError.textContent = 'Please enter an OpenRouter API key.';
                settingsError.classList.add('visible');
                return;
            }

            const selectedText = editor.getSelectedText();
            if (selectedText) {
                userMessage = userMessage + "\n" + selectedText;
            }

            if (editMode == "llm and user") {
                userMessage = appendArtifactToMessage(userMessage);
            }

            store.commit('addMessage', { role: 'user', content: userMessage });
            addMessageToUI(userMessage, 'user');
            chatInput.value = '';

            try {
                const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
                    method: "POST",
                    headers: {
                        "Authorization": `Bearer ${apiKeyInput.value.trim()}`,
                        "Content-Type": "application/json",
                        "HTTP-Referer": window.location.href,
                        "X-Title": "Web Chat App"
                    },
                    body: JSON.stringify({
                        "model": modelSelect.value,
                        "messages": store.state.messages,
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                settingsError.classList.remove('visible');
                const data = await response.json();
                let aiMessage = data.choices[0].message.content;

                extractArtifact(aiMessage);
                store.commit('addMessage', { role: 'assistant', content: aiMessage });
                addMessageToUI(aiMessage, 'assistant');

            } catch (error) {
                console.error('Error:', error);
                settingsError.textContent = 'Error calling the API';
                settingsError.classList.add('visible');
            }
        }
    }

    function scrollToBottom() {
        requestAnimationFrame(() => {
            chatContainer.scrollTop = chatContainer.scrollHeight;
        });
    }

    function preprocessMessageForMath(message) {
        return message.replace(/\\\(/g, '\\\\(')
                         .replace(/\\\)/g, '\\\\)')
                         .replace(/\\\[/g, '\\\\[')
                         .replace(/\\\]/g, '\\\\]')
                         .replace(/\\\$/g, '\\\\$');
    }

    function renderMessageText(message) {
        if (renderMode === 'text') {
            return escapeHtml(message).replace(/\n/g, '<br>');
        } else {
            const messageWithoutArtifact = removeArtifacts(message);
            const processedMessage = preprocessMessageForMath(messageWithoutArtifact);

            const markedOptions = { breaks: true, gfm: true };
            let renderedMessage = marked.parse(processedMessage, markedOptions);
            return renderedMessage;
        }
    }

    function escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    function extractArtifact(text) {
        const pattern = /<artifact\s+(.*?)>([\s\S]*?)<\/artifact>/g;
        let match = pattern.exec(text);

        if (match) {
            const attributesString = match[1];
            const content = match[2].trim();
            const attributes = {};
            const attributePattern = /(\w+)="([^"]*)"/g;
            let attrMatch;
            while ((attrMatch = attributePattern.exec(attributesString)) !== null) {
                const [, key, value] = attrMatch;
                attributes[key] = value;
            }
            
            store.commit('setArtifact', {
                ...attributes,
                content,
                changed: false
            });
            
            return true;
        }
        return false;
    }

    function removeArtifacts(text) {
        const pattern = /<artifact\s+.*?>[\s\S]*?<\/artifact>/g;
        return text.replace(pattern, '').replace(/\n{3,}/g, '\n\n').trim();
    }

    function rerenderMessages() {
        chatContainer.innerHTML = '';
        store.state.messages.forEach((msg) => {
            if (msg.role !== 'system') {
                addMessageToUI(msg.content, msg.role);
            }
        });
        scrollToBottom();

        if (renderMode === 'markdown') {
            MathJax.typesetPromise([chatContainer]).catch((err) => console.error(err.message));
        }
    }

    // Set up resize observer
    const resizeObserver = new ResizeObserver(() => {
        scrollToBottom();
    });
    resizeObserver.observe(chatContainer);

    // Initialize MathJax
    window.addEventListener('load', function () {
        MathJax.startup.promise.then(() => {
            MathJax.typesetPromise().catch((err) => console.error(err.message));
        });
    });

    // Initial system message update
    updateSystemMessage();
});
