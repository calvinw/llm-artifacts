//import 'dotenv/config';

// Store implementation for state management
class Store {
    constructor(options) {
        this.state = options.state || {};
        this.mutations = options.mutations || {};
        this.subscribers = [];
    }

    commit(mutation, payload) {
        if (this.mutations[mutation]) {
            const prevState = JSON.parse(JSON.stringify(this.state));
            this.mutations[mutation](this.state, payload);
            this.notifySubscribers(prevState);
        } else {
            console.error(`Mutation ${mutation} does not exist`);
        }
    }

    subscribe(path, fn) {
        this.subscribers.push({ path, fn });
    }

    notifySubscribers(prevState) {
        this.subscribers.forEach(({ path, fn }) => {
            const newValue = getNestedProperty(this.state, path);
            const prevValue = getNestedProperty(prevState, path);
            if (JSON.stringify(newValue) !== JSON.stringify(prevValue)) {
                fn(newValue, prevValue);
            }
        });
    }

    getState() {
        return this.state;
    }
}

function getNestedProperty(obj, path) {
    if (typeof path !== 'string') {
        path = String(path);
    }
    return path.split('.').reduce((acc, key) => acc && acc[key], obj);
}

class ChatEngine {
    constructor(config) {
        this.apiKey = config.apiKey;
        this.model = config.model;
        let start_artifact = {
            identifier: 'my-document',
            type: 'text/markdown',
            title: 'My Document',
            version: 0,
            content: 
`# Hello World \n I am king of rock and roll!
Five figure five figure Hot Dog jumping Frog`
        };

        // Bind removeArtifacts to this instance
        this.removeArtifacts = this.removeArtifacts.bind(this);

        this.store = new Store({
            state: {
                artifact: {
                    identifier: start_artifact.identifier, 
                    type: start_artifact.type,
                    title: start_artifact.title,
                    version: start_artifact.version,
                    content: start_artifact.content, 
                    changed: false
                },
                revisions: [ 
                    {
                        identifier: start_artifact.identifier, 
                        type: start_artifact.type,
                        title: start_artifact.title,
                        version: start_artifact.version,
                        content: start_artifact.content 
                    }
                ],
                messages: [
                    { 
                        role: 'system', 
                        content: config.systemPrompt || 'You are a helpful AI assistant.', 
                        containsArtifact: false
                    }
                ]
            },
            mutations: {
                setArtifact(state, artifactData) {
                    state.artifact = { ...state.artifact, ...artifactData };
                },
                setArtifactContent(state, content) {
                    state.artifact.content = content;
                },
                setArtifactChanged(state, changed) {
                    state.artifact.changed = changed;
                },
                incrementArtifactVersion(state) {
                    state.artifact.version += 1;
                },
                saveRevision(state, version) {
                    //console.log("saving revision: " + version);
                    state.revisions[version] = {
                        identifier: state.artifact.identifier,
                        type: state.artifact.type,
                        title: state.artifact.title,
                        version: version,
                        content: state.artifact.content 
                    };
                },
                addMessage(state, message) {
                    state.messages.push(message);
                },
                removeArtifact: (state, index) => {
                    state.messages[index].content = this.removeArtifacts(state.messages[index].content);
                },
                clearMessages(state) {
                    state.messages = [{ 
                        role: 'system', 
                        content: state.messages[0].content, 
                        containsArtifact: false
                    }];
                },
                setSystemPrompt(state, content) {
                    state.messages[0].content = content;
                }
            }
        });

        window.store = this.store;

        this.store.subscribe("artifact.version", (version) => {
            //console.log("commiting revision: " + version);
            this.store.commit("saveRevision", version);
        });
    }

    cleanupOldArtifacts() {
        const currentVersion = this.store.state.artifact.version;
        const messages = this.store.state.messages;
        const keepVersions = [currentVersion, currentVersion - 1]; // Keep last 2 versions
        
        // Process all messages except the system message (index 0)
        for (let i = 1; i < messages.length; i++) {
            const message = messages[i];
            
            if (message.hasArtifact) {
                // Extract version from the artifact in the message
                const artifactMatch = message.content.match(/<artifact\s+.*?version="(\d+)".*?>[\s\S]*?<\/artifact>/);
                
                if (artifactMatch) {
                    const version = parseInt(artifactMatch[1]);
                    
                    // Remove artifact if its version is not in keepVersions
                    if (!keepVersions.includes(version)) {
                        // Use existing removeArtifact mutation
                        this.store.commit('removeArtifact', i);
                        
                        // Update hasArtifact flag for this message
                        messages[i].hasArtifact = false;
                    }
                }
            }
        }
    }

    extractArtifact(text) {
        const pattern = /<artifact\s+(.*?)>([\s\S]*?)<\/artifact>/g;
        let match = pattern.exec(text);

        if (match) {
            const attributesString = match[1];
            const content = match[2].trim();
            const attributes = {};
            const attributePattern = /(\w+)="([^"]*)"/g;
            let attrMatch;
            while ((attrMatch = attributePattern.exec(attributesString)) !== null) {
                const [, key, value] = attrMatch;
                attributes[key] = value;
            }
            attributes.version = parseInt(attributes.version);
            this.store.commit('setArtifact', {
                ...attributes,
                content,
                changed: false
            });
            return true;
        }
        return false;
    }

    appendArtifactToMessage(userMessage) {
        const artifact = this.store.state.artifact;
        const artifactXml = `<artifact identifier="${artifact.identifier}" type="${artifact.type}" title="${artifact.title}" version="${artifact.version}"> ${artifact.content} </artifact>`;
        return `${userMessage}\n\n${artifactXml}`;
    }

    async sendMessage(userMessage) {
        // Prepare message
        let messageHasArtifact = false;
        let preparedMessage = userMessage;
        if (this.store.state.artifact.changed || 
            this.store.state.messages.length === 1) {
            this.store.commit('incrementArtifactVersion');
            this.store.commit('setArtifactChanged', false);
            preparedMessage = this.appendArtifactToMessage(userMessage);
            messageHasArtifact = true;
        }

        this.store.commit('addMessage', { 
            role: "user", 
            content: preparedMessage, 
            hasArtifact: messageHasArtifact
        });

        try {
            const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json',
                    'HTTP-Referer': 'http://localhost',
                    'X-Title': 'Chat App'
                },
                body: JSON.stringify({
                    model: this.model,
                    messages: this.getMessages() 
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            const aiMessage = data.choices[0].message.content;
            messageHasArtifact = this.extractArtifact(aiMessage);
            this.store.commit('addMessage', { 
                role: 'assistant', 
                content: aiMessage,
                hasArtifact: messageHasArtifact
            });
            //console.log("cleaning old artifacts");
            this.cleanupOldArtifacts();
            //console.log("cleaned old artifacts");
            return aiMessage;
        } catch (error) {
            console.error('Error:', error.message);
            throw error;
        }
    }

    subscribe(property, changeHandler) {
        this.store.subscribe(property, changeHandler);
    }

    removeArtifacts(text) {
        const pattern = /<artifact\s+.*?>[\s\S]*?<\/artifact>/g;
        return text.replace(pattern, '').trim();
    }

    updateArtifactContent(content) {
        this.store.commit('setArtifactContent', content);
    }

    setArtifactContent(content) {
        this.store.commit('setArtifactContent', content);
    }

    setArtifactChanged(value) {
        this.store.commit('setArtifactChanged', value);
    }

    getMessages() {
        return this.store.state.messages;
    }

    getMessagesLength() {
        return this.store.state.messages.length;
    }

    getArtifact() {
        return this.store.state.artifact;
    }

    getSystemPrompt() {
        return this.store.state.messages[0].content;
    }
}

export default ChatEngine;
