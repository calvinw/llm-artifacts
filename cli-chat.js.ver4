import 'dotenv/config';
import fs from 'fs';
import readline from 'readline';
import fetch from 'node-fetch';

// Extract command line arguments with .env fallbacks
const args = process.argv.slice(2);
const apiKey = args[0] || process.env.npm_config_key;
const model = args[1] || process.env.npm_config_model || 'openai/gpt-4o-mini';
const artifactFile = args[2] || process.env.npm_config_file || './test.md';
const systemPromptFile = args[3] || process.env.npm_config_system || './system.txt';
const messagesFile = args[4] || process.env.npm_config_messages || './messages.md';

if (!apiKey) {
    console.error('Error: API key is required. Please provide it via command line or .env file');
    process.exit(1);
}

console.log(apiKey)
console.log(model)
console.log(artifactFile)
console.log(systemPromptFile)
console.log(messagesFile)

// Store implementation remains clean and focused on state management
class Store {
    constructor(options) {
        this.state = options.state || {};
        this.mutations = options.mutations || {};
        this.subscribers = [];
    }

    commit(mutation, payload) {
        if (this.mutations[mutation]) {
            const prevState = JSON.parse(JSON.stringify(this.state));
            this.mutations[mutation](this.state, payload);
            this.notifySubscribers(prevState);
        } else {
            console.error(`Mutation ${mutation} does not exist`);
        }
    }

    subscribe(path, fn) {
        this.subscribers.push({ path, fn });
    }

    notifySubscribers(prevState) {
        this.subscribers.forEach(({ path, fn }) => {
            const newValue = getNestedProperty(this.state, path);
            const prevValue = getNestedProperty(prevState, path);
            if (JSON.stringify(newValue) !== JSON.stringify(prevValue)) {
                fn(newValue, prevValue);
            }
        });
    }

    getState() {
        return this.state;
    }
}

function getNestedProperty(obj, path) {
    if (typeof path !== 'string') {
        path = String(path);
    }
    return path.split('.').reduce((acc, key) => acc && acc[key], obj);
}


// Load system prompt from file
function loadSystemPrompt() {
    try {
        return fs.readFileSync(systemPromptFile, 'utf8').trim();
    } catch (error) {
        console.warn(`Warning: Could not load system prompt from ${systemPromptFile}. Using default.`);
        return 'You are a helpful AI assistant.';
    }
}

// Initialize store with system prompt from file
const store = new Store({
    state: {
        artifact: {
            identifier: 'cli-document',
            type: 'text/markdown',
            title: 'CLI Document',
            version: 0,
            changed: false,
            content: ''
        },
        messages: [
            { role: 'system', content: loadSystemPrompt() }
        ]
    },
    mutations: {
        setArtifact(state, artifactData) {
            state.artifact = { ...state.artifact, ...artifactData };
        },
        setArtifactContent(state, content) {
            state.artifact.content = content;
        },
        setArtifactChanged(state, changed) {
            state.artifact.changed = changed;
        },
        incrementArtifactVersion(state) {
            state.artifact.version += 1;
        },
        addMessage(state, message) {
            state.messages.push(message);
        },
        clearMessages(state) {
            state.messages = [{ role: 'system', content: state.messages[0].content }];
        },
        setSystemPrompt(state, content) {
            state.messages[0].content = content;
        }
    }
});

// Helper functions
function extractArtifact(text) {
    const pattern = /<artifact\s+(.*?)>([\s\S]*?)<\/artifact>/g;
    let match = pattern.exec(text);

    if (match) {
        const attributesString = match[1];
        const content = match[2].trim();
        const attributes = {};
        const attributePattern = /(\w+)="([^"]*)"/g;
        let attrMatch;
        while ((attrMatch = attributePattern.exec(attributesString)) !== null) {
            const [, key, value] = attrMatch;
            attributes[key] = value;
        }
        attributes.version = parseInt(attributes.version);
        store.commit('setArtifact', {
            ...attributes,
            content,
            changed: false
        });
        return true;
    }
    return false;
}

function appendArtifactToMessage(userMessage) {
    const artifact = store.state.artifact;
    const artifactXml = `<artifact identifier="${artifact.identifier}" type="${artifact.type}" title="${artifact.title}" version="${artifact.version}">
${artifact.content}
</artifact>`;
    return `${userMessage}\n\n${artifactXml}`;
}

async function sendMessage(userMessage) {

    // Prepare and send message
    let finalMessage = userMessage;
    if (store.state.artifact.changed || store.state.messages.length === 1) {
        store.commit('incrementArtifactVersion');
        store.commit('setArtifactChanged', false);
        finalMessage = appendArtifactToMessage(userMessage);
    }

    store.commit('addMessage', { role:"user", content: finalMessage });

    try {
        const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json',
                'HTTP-Referer': 'http://localhost',
                'X-Title': 'CLI Chat App'
            },
            body: JSON.stringify({
                model: model,
                messages: store.state.messages
            })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        const aiMessage = data.choices[0].message.content;
        extractArtifact(aiMessage);
        store.commit('addMessage', { role: 'assistant', content: aiMessage });
        console.log('\nAI:', aiMessage, '\n');
    } catch (error) {
        console.error('Error:', error.message);
    }
}


// Helper functions for displaying state
function displayArtifact() {
    const artifact = store.getState().artifact;
    console.log('\nCurrent Artifact Structure:');
    console.log('-------------------------');
    console.log(JSON.stringify({
        identifier: artifact.identifier,
        type: artifact.type,
        title: artifact.title,
        version: artifact.version,
        changed: artifact.changed
    }, null, 2));
    console.log('\nContent:');
    console.log(artifact.content);
}

function displayMessages() {
    const messages = store.getState().messages;
    console.log('\nMessage History:');
    console.log('---------------');
    messages.forEach((msg, index) => {
        console.log(`[${index}] ${msg.role.toUpperCase()}: ${msg.content}`);
    });
}

function displaySystemPrompt() {
    const systemPrompt = store.getState().messages[0].content;
    console.log('\nCurrent System Prompt:');
    console.log('---------------------');
    console.log(systemPrompt);
}

// CLI interface
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});


// Function to format messages for markdown - moved outside store
function formatMessagesForMarkdown(messages) {
    const timestamp = new Date().toISOString();
    let output = `# Chat Messages (Updated: ${timestamp})\n`;
    
    messages.forEach((msg, index) => {
        output +=`----------------------------\n`
        output += `${msg.role.toUpperCase()}: `;
        output += `${msg.content}\n`;
        output +=`----------------------------`
    });
    
    return output;
}

// Process special commands
function processCommand(input) {
    switch (input.toLowerCase()) {
        case '/artifact':
            displayArtifact();
            return true;
        case '/messages':
            displayMessages();
            return true;
        case '/system':
            displaySystemPrompt();
            return true;
        case '/help':
            console.log('\nAvailable Commands:');
            console.log('/artifact - Display current artifact structure');
            console.log('/messages - Display message history');
            console.log('/system  - Display current system prompt');
            console.log('/help    - Show this help message');
            console.log('exit     - Exit the chat');
            return true;
        default:
            return false;
    }
}

// Main chat loop
async function startChat() {
    try {
        // Load initial artifact
        const initialContent = fs.readFileSync(artifactFile, 'utf8');
        store.commit('setArtifactContent', initialContent);
        console.log('Initial artifact loaded. Starting chat...');
        console.log('Type /help to see available commands\n');

        const askQuestion = () => {
            rl.question('You: ', async (userInput) => {
                if (userInput.toLowerCase() === 'exit') {
                    rl.close();
                    return;
                }

                // Check for special commands
                if (processCommand(userInput)) {
                    askQuestion();
                    return;
                }

                await sendMessage(userInput);
                askQuestion();
            });
        };

        askQuestion();
    } catch (error) {
        console.error('Error starting chat:', error);
        process.exit(1);
    }
}

// Subscribe to artifact changes
store.subscribe('artifact.content', (newValue) => {
    fs.writeFileSync(artifactFile, newValue, 'utf8');
});

// Add subscriber for messages
store.subscribe('messages', (newValue) => {
    const formattedContent = formatMessagesForMarkdown(newValue);
    fs.writeFileSync(messagesFile, formattedContent, 'utf8');
});

// Start the chat
startChat();
